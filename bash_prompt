#!/bin/bash

# save the return value of the last executed process
PROMPT_COMMAND='PS1_RET_VALUE=$?;'

# translate the saved return value in a colored string containing the error description
PS1_RET_VALUE='$(
    if [[ "${PS1_RET_VALUE}" == 0 ]];
    then
        echo -ne "${NO_COLOR}(${GREEN}${PS1_RET_VALUE}${NO_COLOR})";
    else
        echo -ne "${NO_COLOR}(${RED}${PS1_RET_VALUE}:$(python -c "import os; print(os.strerror(${PS1_RET_VALUE}))")${NO_COLOR})";
    fi
)'

# generate a colored string describing the status of the Git working copy in the current directory
PS1_GIT_STATUS='$(
    if which git &> /dev/null && git status &> /dev/null;
    then
        echo -ne "${NO_COLOR}{";
        
        if [[ -z "$(git status -s)" ]];
        then
            echo -ne "${GREEN}";
        else
            echo -ne "${RED}";
        fi;
        
        echo -n "git:";
        
        branch="$(git branch | sed -n "1 s:[^ ]* :: p")";
        echo -n "${branch}";
        
        echo -ne "${NO_COLOR}}";
    fi
)'

# generate a colored string describing the status of the Subversion working copy in the current directory
PS1_SVN_STATUS='$(
    if which svn &> /dev/null && [[ -d .svn ]];
    then
        url=$(svn info | sed -n "/^URL/ s/URL:[[:space:]]*// p");
        
        if [[ "${url/:*/}" != "file" ]];
        then
            host="${url/*:\/\//}";
            host="${host/\/*/}";
            
            echo -ne "${NO_COLOR}{";
            
            if ping -c1 -W1 "${host}" &> /dev/null;
            then
        
                if [[ -z "$(svn status)" ]];
                then
                    echo -ne "${GREEN}";
                else
                    echo -ne "${RED}";
                fi
                
                rev="$(svn status -u | sed -n "$ s/Status against revision:[[:space:]]*\([[:digit:]]*\)/svn:rev\1/ p")";
                echo -n "${rev}";
            else
                echo -ne "${YELLOW}svn:unknown";
            fi;
            
            echo -ne "${NO_COLOR}}";
        fi
    fi
)'

# generate the final source code management status description string
PS1_SCM_STATUS="${PS1_GIT_STATUS}${PS1_SVN_STATUS}"

# color the username depending on user being root or not
USER_COLOR="$(
    if [[ $UID == 0 ]]
    then
        echo "${RED}"
    else
        echo "${GREEN}"
    fi
)"

## PS1: Default prompt
PS1="[${USER_COLOR}\u${YELLOW}@\h${NO_COLOR}:${BLUE}\w${NO_COLOR}]${PS1_RET_VALUE}${PS1_SCM_STATUS}\n\$ "

# clean the environment
unset PS1_RET_VALUE PS1_GIT_STATUS PS1_SVN_STATUS PS1_SCM_STATUS USER_COLOR

## Use Bash defaults for continuation prompt (PS2) and select prompt (PS3)

## PS4: Debug prompt
PS4='$0, Line $LINENO: '

