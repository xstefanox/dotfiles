## Override the standard os prompt.
## This prompt adds:
## - colored info about the username, the hostname and the current path
## - the last command return value and, in case of error, the corresponding error string as defined in the libc
## - if the current path is under version control, info about the current commit/branch/local modifications (currently supported vcs: Git, SVN, HG)
## - notification about GNU screen session
## - notification about SSH session

# save the list of return error strings supported by the OS libc and the geatest error number
PS1_os_maxerr=133
IFS=$'\n' PS1_os_errno=( $(python -c 'from __future__ import print_function; import sys; import os; [ print(os.strerror(e)) for e in range(0, int(sys.argv[1]) + 1) ]' ${PS1_os_maxerr}) )

# save the return value of the last executed process
PROMPT_COMMAND='PS1_return_value=$?;'

# translate the saved return value in a colored string containing the error description
PS1_return_value='$(
    echo -ne "${NO_COLOR}(";
    
    if [[ "${PS1_return_value}" == 0 ]];
    then
        echo -ne "$([[ $(uname -s) == Darwin ]] && echo "${GREEN}" || echo "${BGREEN}")${PS1_return_value}";
    else
        echo -ne "$([[ $(uname -s) == Darwin ]] && echo "${RED}" || echo "${BRED}")${PS1_return_value}:$([[ ${PS1_return_value} -gt ${PS1_os_maxerr} ]] && echo "Unknown error" || echo "${PS1_os_errno[${PS1_return_value}]}")";
    fi
    
    echo -ne "${NO_COLOR})";
)'

# generate a colored string describing the status of the Git working copy in the current directory
PS1_git_status='$(
    if which git &> /dev/null && git status &> /dev/null;
    then
        echo -ne "${NO_COLOR}{";
        
        status="$(git status --porcelain)"
        
        if [[ -z "${status}" ]];
        then
            [[ $(uname -s) == Darwin ]] && echo -ne "${GREEN}" || echo -ne "${BGREEN}";
        else
            [[ $(uname -s) == Darwin ]] && echo -ne "${RED}" || echo -ne "${BRED}";
        fi;
        
        echo -n "git:$(git branch --no-color | sed -n "/^*/ s:[^ ]* :: p")";
        
        
        if [[ -n "${status}" ]];
        then
            declare -a status_info;
            added_count=$(echo "${status}" | grep "^A" | wc -l);
            deleted_count=$(echo "${status}" | grep "^\(D \| D\|D\) " | wc -l);
            modified_count=$(echo "${status}" | grep "^\(M \| M\|MM\) " | wc -l);
            untracked_count=$(echo "${status}" | grep "^??" | wc -l);
            [[ "${added_count}" -gt 0 ]] && status_info[0]="$(echo "${added_count}" | sed "s:[[:space:]]*:+:")";
            [[ "${deleted_count}" -gt 0 ]] && status_info[1]="$(echo "${deleted_count}" | sed "s:[[:space:]]*:-:")";
            [[ "${modified_count}" -gt 0 ]] && status_info[2]="$(echo "${modified_count}" | sed "s:[[:space:]]*:±:")";
            [[ "${untracked_count}" -gt 0 ]] && status_info[3]="$(echo "${untracked_count}" | sed "s:[[:space:]]*:?:")";
            echo -n "($(printf "%s/" "${status_info[@]}" | cut -d "/" -f 1-${#status_info[@]}))";
        fi;
        
        echo -ne "${NO_COLOR}";
        
        echo -n "}"
    fi
)'

# generate a colored string describing the status of the Mercurial working copy in the current directory
PS1_hg_status='$(
    if which hg &> /dev/null && hg status &> /dev/null;
    then
        echo -ne "${NO_COLOR}{";
        
        if [[ -z "$(hg status)" ]];
        then
            [[ $(uname -s) == Darwin ]] && echo -ne "${GREEN}" || echo -ne "${BGREEN}";
        else
            [[ $(uname -s) == Darwin ]] && echo -ne "${RED}" || echo -ne "${BRED}";
        fi;
        
        echo -n "hg:$(hg branch)";
        
        echo -ne "${NO_COLOR}}";
    fi
)'

# generate a colored string describing the status of the Subversion working copy in the current directory;
# this must be enabled on demand setting the environment variable PS1_svn_status_on, because it performs a
# client/server communication that could lead to a slow prompt
PS1_svn_status='$(
    if which svn &> /dev/null && svn info &> /dev/null;
    then
        rev="$(svn info | sed -n "/^Revision/ s/.*:[[:space:]]*// p")"
        status="$(svn status)"
        
        echo -ne "${NO_COLOR}{";
        
        if [[ -n "${status}" ]];
        then
            [[ $(uname -s) == Darwin ]] && echo -ne "${RED}" || echo -ne "${BRED}";
            
            echo -n "svn:${rev}";
            
            declare -a status_info;
            added_count=$(echo "${status}" | grep "^A" | wc -l);
            deleted_count=$(echo "${status}" | grep "^D" | wc -l);
            modified_count=$(echo "${status}" | grep "^M" | wc -l);
            untracked_count=$(echo "${status}" | grep "^?" | wc -l);
            [[ "${added_count}" -gt 0 ]] && status_info[0]="$(echo "${added_count}" | sed "s:[[:space:]]*:+:")";
            [[ "${deleted_count}" -gt 0 ]] && status_info[1]="$(echo "${deleted_count}" | sed "s:[[:space:]]*:-:")";
            [[ "${modified_count}" -gt 0 ]] && status_info[2]="$(echo "${modified_count}" | sed "s:[[:space:]]*:±:")";
            [[ "${untracked_count}" -gt 0 ]] && status_info[3]="$(echo "${untracked_count}" | sed "s:[[:space:]]*:?:")";
            echo -n "($(printf "%s/" "${status_info[@]}" | cut -d "/" -f 1-${#status_info[@]}))";
        else
            [[ $(uname -s) == Darwin ]] && echo -ne "${GREEN}" || echo -ne "${BGREEN}";
            
            echo -n "svn:${rev}";
        fi;
        
        echo -ne "${NO_COLOR}}";
    fi
)'

# generate the final version control system status description string
PS1_vcs_status="${PS1_git_status}${PS1_hg_status}${PS1_svn_status}"

# color the username depending on user being root or not
PS1_user_color="$(
    if [[ $UID == 0 ]]
    then
        [[ $(uname -s) == Darwin ]] && echo "${RED}" || echo "${BRED}"
    else
        [[ $(uname -s) == Darwin ]] && echo "${GREEN}" || echo "${BGREEN}"
    fi
)"

# set an SSH descriptive string in case of a remote connection
PS1_ssh_status=$([[ -n "${SSH_CLIENT}" ]] && echo "$([[ $(uname -s) == Darwin ]] && echo "${YELLOW}" || echo "${BYELLOW}")ssh:${NO_COLOR}")

PS1_screen_status="$([[ -n "${STY}" ]] && echo "[screen:$(echo "${STY#*.}" | sed -e "s:.${HOSTNAME}::")]")"

# set the shell tag
PS1_hashtag='$([[ -n "${PS1_tag}" ]] && echo -e " ${CYAN}#${PS1_tag}${NO_COLOR}")'

# set the CPU load warning string
PS1_cpu_load='$(

    if [[ $(uname -s) == Darwin ]]
    then
        cpu_load="$(sysctl -n vm.loadavg | awk "{ print \$2 }")"
        cpu_count="$(( $(sysctl -n hw.physicalcpu_max) * $(sysctl -n hw.logicalcpu_max) ))"
    else
        cpu_load="$(cat /proc/loadavg | cut -d" " -f1)"
        cpu_count="$(grep "model name" /proc/cpuinfo | wc -l)"
    fi

    load_percent="$(
        awk \
            -v cpu_load="${cpu_load}" \
            -v cpu_count="${cpu_count}" \
            "BEGIN {
                load_percent = 100 * cpu_load / cpu_count;
                load_percent = (load_percent == int(load_percent)) ? load_percent : int(load_percent) + 1;
                load_percent = (load_percent > 100) ? 100 : load_percent;
                print load_percent;
            }")"
    
    if [[ "${load_percent}" -ge 90 ]]
    then
        echo -ne " $([[ $(uname -s) == Darwin ]] && echo "${RED}" || echo "${BRED}")⌂${load_percent}%${NO_COLOR}"
    elif [[ "${load_percent}" -ge 60 ]]
    then
        echo -ne " $([[ $(uname -s) == Darwin ]] && echo "${YELLOW}" || echo "${BYELLOW}")⌂${load_percent}%${NO_COLOR}"
    fi
)'

# set a descriptive string about jobs
PS1_jobs='$(

    running="$(( $(jobs -r | wc -l) ))"
    stopped="$(( $(jobs -s | wc -l) ))"
    detached="$(which screen &> /dev/null && { screen -ls 2> /dev/null | grep -c Detach; true; } || echo 0)"
    ret=""

    if [[ $detached != "0" ]]
    then
        ret="${ret}${YELLOW}${detached}d${NO_COLOR}"
    fi

    if [[ $running != "0" ]]
    then
        if [[ $ret != "" ]]
        then
            ret="${ret}/"
        fi
        ret="${ret}${YELLOW}${running}&${NO_COLOR}"
    fi

    if [[ $stopped != "0" ]]
    then
        if [[ $ret != "" ]]
        then
            ret="${ret}/"
        fi
        ret="${ret}${YELLOW}${stopped}z${NO_COLOR}"
    fi

    [[ -n "${ret}" ]] && echo -ne " ${ret}"
)'

## PS1: Default prompt
PS1="${NO_COLOR}${PS1_screen_status}[${PS1_ssh_status}${PS1_user_color}\u$([[ $(uname -s) == Darwin ]] && echo "${YELLOW}" || echo "${BYELLOW}")@\h${NO_COLOR}:$([[ $(uname -s) == Darwin ]] && echo "${BLUE}" || echo "${BBLUE}")\w${NO_COLOR}]${PS1_return_value}${PS1_vcs_status}${PS1_jobs}${PS1_hashtag}${PS1_cpu_load}\n\$ "

# clean the environment
unset PS1_return_value PS1_git_status PS1_hg_status PS1_svn_status PS1_vcs_status PS1_ssh_status PS1_screen_status PS1_user_color PS1_hashtag PS1_cpu_load PS1_jobs

## Use Bash defaults for continuation prompt (PS2) and select prompt (PS3)

## PS4: Debug prompt
PS4='$0, Line $LINENO: '

# set/unset the tag string
function prompt_tag()
{
    local IFS=
    export PS1_tag="$@"
}
