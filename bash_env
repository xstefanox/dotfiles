#!/bin/bash

####################
## OS RECOGNITION ##
####################

alias linux='[[ $(uname -s) == Linux ]]'
alias osx='[[ $(uname -s) == Darwin ]]'

##############
## HOME BIN ##
##############

## Path to the user binaries
if osx
then
    export HOME_BIN="$HOME/Library/bin"
else
    export HOME_BIN="$HOME/.local/bin"
fi

## Ensure HOME_BIN exists
[[ ! -d "$HOME_BIN" ]] && mkdir -p "$HOME_BIN"

## Add HOME_BIN to the PATH
export PATH="$HOME_BIN:$PATH"

##############
## HOMEBREW ##
##############

# Add the Homebrew PATH and Bash completion
if [[ osx && -d "$HOME/Library/Homebrew" ]]
then
    export PATH=$HOME/Library/Homebrew/bin:$PATH
    export PATH=$HOME/Library/Homebrew/sbin:$PATH
fi

#####################
## BASH COMPLETION ##
#####################

if osx
then
    if which brew &> /dev/null
    then
        #source $(brew --prefix)/etc/bash_completion
        #source $(brew --prefix)/Library/Contributions/brew_bash_completion.sh
        :
    fi
else
    [[ -z "$BASH_COMPLETION" && -f /etc/bash_completion ]] && export BASH_COMPLETION=/etc/bash_completion
    [[ -z "$BASH_COMPLETION_DIR" && -f /etc/bash_completion.d ]] && export BASH_COMPLETION_DIR=/etc/bash_completion.d
    [[ -z "$BASH_COMPLETION_COMPAT_DIR" && -f /etc/bash_completion.d ]] && export BASH_COMPLETION_COMPAT_DIR=/etc/bash_completion.d
fi

############
## EDITOR ##
############

if osx
then
    export EDITOR=nano
elif [[ -n "$DISPLAY" ]]
then
    export EDITOR=gedit
else
    export EDITOR=nano
fi

###########
## PAGER ##
###########

#if which aless &> /dev/null
#then
#    export PAGER=aless
#elif which most &> /dev/null

if which most &> /dev/null
then
    export PAGER=most
elif which less &> /dev/null
then
    export PAGER=less
fi

#################
## PYTHON EGGS ##
#################

export PYTHONSTARTUP=$HOME/.pythonrc
export PYTHONHISTORY=$HOME/.python_history

# create the Python startup file if it does not exist
if [[ ! -f "${PYTHONSTARTUP}" ]]
then
    cat << __EOF__ > "${PYTHONSTARTUP}"
#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os
import os.path
import rlcompleter
import readline
import atexit

# use termcolor if installed, otherwise defined our own custom color functions
try:

    import termcolor
    
    def green(msg):
        return termcolor.colored(msg, 'green')
    
    def yellow(msg):
        return termcolor.colored(msg, 'yellow')

except ImportError:

    def green(msg):
        return '\x1b[32m{0}\x1b[0m'.format(msg)

    def yellow(msg):
        return '\x1b[33m{0}\x1b[0m'.format(msg)

# determine the path to the history file
history = os.getenv('PYTHONHISTORY') or os.path.expanduser('~/.python_history')

# create the history file if it does not exist
if not os.path.exists(history) and not os.path.isdir(history):
    try:
        open(history, 'w').close()
    # gracefully ignore things if history is not writable
    except IOError, e:
        print(yellow('!!! ') + 'Cannot create history file: ' + e.strerror)

# load the history
try:
    # load only if there is something to load, otherwise it will fail
    if os.path.getsize(history) > 0:
        readline.read_history_file(history)
except IOError, e:
    print(yellow('!!! ') + 'Cannot load history file: ' + e.strerror)

# create a function to save the history
def save_history_at_exit(history):

    import readline
    
    try:

        import termcolor
    
        def yellow(msg):
            return termcolor.colored(msg, 'yellow')

    except ImportError:

        def yellow(msg):
            return '\x1b[33m{0}\x1b[0m'.format(msg)
    
    # ensure that the history does not exceed the configured size
    readline.set_history_length(os.getenv('PYTHONHISTSIZE') or os.getenv('HISTSIZE') or 100)
    
    # save the history
    try:
        readline.write_history_file(history)
    except IOError, e:
        print(yellow('!!! ') + 'Cannot save history file: ' + e.strerror)

# register the handler to be called at exit
atexit.register(save_history_at_exit, history)

# enable autocompletion on TAB
readline.parse_and_bind('tab: complete')

# enable colored prompt
if os.getenv('TERM') in ('xterm', 'xterm-color', 'rxvt', 'Eterm', 'putty'):
    sys.ps1 = green('>>> ')
    sys.ps2 = green('... ')

# delete the temporary variables
del history, green, yellow, atexit, readline, rlcompleter, save_history_at_exit

__EOF__

fi
    
# Mac OSX 10.7 Lion supports only Python 2.7
if osx
then
    export PYTHONPATH27=$HOME/Library/Python/2.7/site-packages
    export PYTHONBINPATH27=$PYTHONPATH27/bin
    export PATH=$PYTHONBINPATH27:$PATH
    export PYTHONPATH=$PYTHONPATH27:$PYTHONPATH

    # don't use the bloated easy_install
    alias easy_install='echo "!!! Deprecated"; false'
    alias easy_install-2.5='echo "!!! Deprecated"; false'
    alias easy_install-2.6='echo "!!! Deprecated"; false'
    alias easy_install-2.7='echo "!!! Deprecated"; false'

    # make pip use the default paths and install every egg into the user home
    function pip()
    {
	    pip=$(which pip)

    	if [[ $1 == install ]]
	    then
		    $pip $@ --install-option="--install-purelib=$PYTHONPATH27" --install-option="--install-platlib=$PYTHONPATH27" --install-option="--prefix=$PYTHONPATH27"
    	else
	    	$pip $@
    	fi
    }
    export -f pip
fi

#########
## GIT ##
#########

if which git &> /dev/null
then
    git config --global user.name "Stefano Varesi"
    # disabled: this creates a daemon and a warning is always raised when closing the window in Mac OSX
    #git config --global credential.helper cache
    git config --global color.ui true
    git config --global core.excludesfile "~/.gitignore.global"
fi

#########
## WII ##
#########

osx && export PATH=/Volumes/WII/bin:$PATH || export PATH=/media/WII/bin:$PATH

##########
## MISC ##
##########

## Maximum allowed file size on a FAT32 filesystem
export FAT32_MAX_FILE_SIZE="$((2**32 - 1))"

## Size of a Nintendo WII ISO image
export WII_ISO_SIZE="4699979776"

## Localization
[[ -z "$LC_ALL" && -n "$LANG" ]] && export LC_ALL="$LANG"
[[ -z "$LANG" && -n "$LC_ALL" ]] && export LANG="$LC_ALL"

## Mac OSX
if osx
then

    ## do not write useless trash to samba shares
    defaults write com.apple.desktopservices DSDontWriteNetworkStores true

    ## disable the warning when changing a file extension
    defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

    ## don't run anything on X11/XQuartz opening
    defaults write org.x.X11 app_to_run /usr/bin/true
    defaults write org.macosforge.xquartz.X11 app_to_run /usr/bin/true

## Linux
else

    ## Preferences requiring an active X11 session
    if [[ -n "$DISPLAY" ]]
    then
        if which gsettings &> /dev/null
        then
            gsettings set org.gnome.gedit.preferences.editor tabs-size 4
            gsettings set org.gnome.gedit.preferences.editor insert-spaces true
            gsettings set org.gnome.gedit.preferences.editor create-backup-copy false
            gsettings set org.gnome.gedit.preferences.editor display-line-numbers true
            gsettings set org.gnome.gedit.preferences.editor auto-indent true
        fi
    fi

fi

