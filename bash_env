#!/bin/bash

####################################
# Bash initialization
#
# LOGIN:
# /etc/profile
# 	/etc/profile.env (if exists)
# 	/etc/bash/bashrc (if exists)
# 	/etc/profile.d/*.sh (if exists)
# 
# ~/.bash_profile
# 	/etc/bashrc
# 	~/.bashrc (if exists)
# if( ~/.bash_profile doesn't exist)
# 	~/.bash_login
# if( ~/.bash_profile doesn't exist)
# 	~/.bash_login
#
# NON-LOGIN
# /etc/bash/bashrc
# ~/.bashrc
####################################

########
# BASH #
########

# Fix cd typos
shopt -s cdspell

# Treat undefined variables as errors
#set -o nounset

# Don't attempt to search the PATH for possible completions when completion is attempted on an empty line
shopt -s no_empty_cmd_completion

####################
## OS RECOGNITION ##
####################

alias linux='[[ $(uname -s) == Linux ]]'
alias osx='[[ $(uname -s) == Darwin ]]'

##############
## HOME BIN ##
##############

## Path to the user binaries
if osx
then
    export HOME_BIN="$HOME/Library/bin"
else
    export HOME_BIN="$HOME/.local/bin"
fi

## Ensure HOME_BIN exists
[[ ! -d "$HOME_BIN" ]] && mkdir -p "$HOME_BIN"

## Add HOME_BIN to the PATH
export PATH="$HOME_BIN:$PATH"

##############
## HOMEBREW ##
##############

# Add the Homebrew PATH
if [[ osx && -d "$HOME/Library/Homebrew" ]]
then
    export PATH=$HOME/Library/Homebrew/bin:$PATH
    export PATH=$HOME/Library/Homebrew/sbin:$PATH
fi

#####################
## BASH COMPLETION ##
#####################

if osx
then
    if which brew &> /dev/null
    then
        source $(brew --prefix)/etc/bash_completion
        source $(brew --prefix)/Library/Contributions/brew_bash_completion.sh
        :
    fi
else
    [[ -z "$BASH_COMPLETION" && -f /etc/bash_completion ]] && export BASH_COMPLETION=/etc/bash_completion
    [[ -z "$BASH_COMPLETION_DIR" && -f /etc/bash_completion.d ]] && export BASH_COMPLETION_DIR=/etc/bash_completion.d
    [[ -z "$BASH_COMPLETION_COMPAT_DIR" && -f /etc/bash_completion.d ]] && export BASH_COMPLETION_COMPAT_DIR=/etc/bash_completion.d
fi

# TAB-completion for sudo
complete -cf sudo

############
## EDITOR ##
############

if osx
then
    if which mate &> /dev/null
    then
        export EDITOR="mate -w"
    else
        export EDITOR=nano
    fi
elif [[ -n "$DISPLAY" ]]
then
    export EDITOR=gedit
else
    export EDITOR=nano
fi

###########
## PAGER ##
###########

if which most &> /dev/null
then
    export PAGER=most
elif which less &> /dev/null
then
    export PAGER=less
fi

############
## PYTHON ##
############

export PYTHONSTARTUP=$HOME/.pythonrc
export PYTHONHISTORY=$HOME/.python_history
    
# Mac OSX 10.7 Lion supports only Python 2.7
if osx
then
    export PYTHONPATH27=$HOME/Library/Python/2.7/site-packages
    export PYTHONBINPATH27=$PYTHONPATH27/bin
    export PATH=$PYTHONBINPATH27:$PATH
    export PYTHONPATH=$PYTHONPATH27:$PYTHONPATH

    # don't use the bloated easy_install
    alias easy_install='echo "!!! Deprecated"; false'
    alias easy_install-2.5='echo "!!! Deprecated"; false'
    alias easy_install-2.6='echo "!!! Deprecated"; false'
    alias easy_install-2.7='echo "!!! Deprecated"; false'

    # make pip use the default paths and install every egg into the user home
    which pip &> /dev/null && function pip()
    {
	    pip=$(which pip)

    	if [[ $1 == install ]]
	    then
		    $pip $@ --install-option="--install-purelib=$PYTHONPATH27" --install-option="--install-platlib=$PYTHONPATH27" --install-option="--prefix=$PYTHONPATH27"
    	else
	    	$pip $@
    	fi
    } && export -f pip
fi

#########
## GIT ##
#########

if which git &> /dev/null
then
    git config --global user.name "Stefano Varesi"
    # disabled: this creates a daemon and a warning is always raised when closing the window in Mac OSX
    #git config --global credential.helper cache
    git config --global color.ui true
    git config --global core.excludesfile "~/.gitignore.global"
fi

#########
## WII ##
#########

osx && export PATH=/Volumes/WII/bin:$PATH || export PATH=/media/WII/bin:$PATH

#########
## RVM ##
#########

if [[ -d "${HOME}/.rvm" ]]
then
    PATH=$HOME/.rvm/bin:$PATH
    [[ -s "${HOME}/.rvm/scripts/rvm" ]] && source "${HOME}/.rvm/scripts/rvm"
fi

############
## NODEJS ##
############

if osx && which npm &> /dev/null
then
    # get the Homebrew installation path
    homebrew_path=$(brew --config | sed -n '/HOMEBREW_PREFIX/ s/.*: // p')
    
    # add the NodeJS binaries installed by Homebrew to the path
    PATH=${homebrew_path}/share/npm/bin:$PATH
    
    # add the NodeJS modules installation paths
    export NODE_PATH=${homebrew_path}/share/npm/lib/node_modules:${homebrew_path}/lib/node_modules/npm/node_modules:$NODE_PATH
    
    unset homebrew_path
fi

#########
## SSH ##
#########

## Tab-completion for ssh hostnames that reads the user ssh configuration file
function _ssh()
{
    local cur prev opts config
    
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    config="${HOME}/.ssh/config"
    opts="$([[ -f "${config}" ]] && \grep "^Host" "${config}" | cut -d' ' -f2)"

    COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
}

complete -F _ssh ssh


##########
## MISC ##
##########

## Maximum allowed file size on a FAT32 filesystem
export FAT32_MAX_FILE_SIZE="$((2**32 - 1))"

## Size of a Nintendo WII ISO image
export WII_ISO_SIZE="4699979776"

## Localization
[[ -z "$LC_ALL" && -n "$LANG" ]] && export LC_ALL="$LANG"
[[ -z "$LANG" && -n "$LC_ALL" ]] && export LANG="$LC_ALL"

####################
## OS PREFERENCES ##
####################

## Mac OSX
if osx
then

    ## do not write useless trash to samba shares
    defaults write com.apple.desktopservices DSDontWriteNetworkStores true

    ## disable the warning when changing a file extension
    defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

    ## don't run anything on X11/XQuartz opening
    defaults write org.x.X11 app_to_run /usr/bin/true
    defaults write org.macosforge.xquartz.X11 app_to_run /usr/bin/true

## Linux
else

    ## Preferences requiring an active X11 session
    if [[ -n "$DISPLAY" ]]
    then
        if which gsettings &> /dev/null
        then
            gsettings set org.gnome.gedit.preferences.editor tabs-size 4
            gsettings set org.gnome.gedit.preferences.editor insert-spaces true
            gsettings set org.gnome.gedit.preferences.editor create-backup-copy false
            gsettings set org.gnome.gedit.preferences.editor display-line-numbers true
            gsettings set org.gnome.gedit.preferences.editor auto-indent true
        fi
        
        ## if using Ubuntu
        if which lsb_release &> /dev/null && [[ "$(lsb_release --id | sed 's/.*:[[:space:]]*\(.*\)/\1/')" == Ubuntu ]]
        then
            ## disable the Unity scrollbar
            export LIBOVERLAY_SCROLLBAR=0
        fi
    fi

fi

